# src/chatbot/management/commands/ingest_law_data.py

import re
from django.core.management.base import BaseCommand
from django.db import transaction
from chatbot.models import LawDocument, LawProvision

# --- C·∫•u h√¨nh ---
FILE_PATH = '/app/data/67_VBHN-VPQH_671127.txt'
DOCUMENT_TITLE = "Lu·∫≠t Doanh nghi·ªáp (VƒÉn b·∫£n h·ª£p nh·∫•t 67/VBHN-VPQH)"
DOCUMENT_NUMBER = "67/VBHN-VPQH"

def clean_text(text):
    if not text:
        return ""
    text = re.sub(r'\[\w+\]', '', text)
    text = text.replace('\uffef', '').replace('\ufeff', '')
    text = re.sub(r'\s+', ' ', text).strip()
    return text

class Command(BaseCommand):
    help = 'X·ª≠ l√Ω v√† n·∫°p d·ªØ li·ªáu t·ª´ vƒÉn b·∫£n lu·∫≠t v√†o c∆° s·ªü d·ªØ li·ªáu (phi√™n b·∫£n ·ªïn ƒë·ªãnh).'

    @transaction.atomic
    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh n·∫°p d·ªØ li·ªáu lu·∫≠t...'))

        # --- 1. T·∫°o ho·∫∑c l·∫•y vƒÉn b·∫£n lu·∫≠t g·ªëc ---
        document, created = LawDocument.objects.update_or_create(
            title=DOCUMENT_TITLE,
            defaults={'document_number': DOCUMENT_NUMBER, 'source_file': FILE_PATH.split('/')[-1]}
        )
        if created:
            self.stdout.write(f"‚úÖ ƒê√£ t·∫°o m·ªõi vƒÉn b·∫£n: '{document.title}'")
        else:
            self.stdout.write(f"üîç S·ª≠ d·ª•ng vƒÉn b·∫£n ƒë√£ c√≥: '{document.title}'. ƒêang x√≥a c√°c ƒëi·ªÅu kho·∫£n c≈©...")
            LawProvision.objects.filter(document=document).delete()
            self.stdout.write("üóëÔ∏è  X√≥a d·ªØ li·ªáu c≈© th√†nh c√¥ng.")

        # --- 2. ƒê·ªçc file ---
        try:
            with open(FILE_PATH, 'r', encoding='utf-8') as f:
                content = f.read()
        except FileNotFoundError:
            self.stdout.write(self.style.ERROR(f"‚ùå L·ªñI: Kh√¥ng t√¨m th·∫•y file t·∫°i '{FILE_PATH}'."))
            return
        
        self.stdout.write("üìñ ƒê·ªçc file th√†nh c√¥ng. B·∫Øt ƒë·∫ßu b√≥c t√°ch...")

        # --- 3. B√≥c t√°ch d·ªØ li·ªáu theo ph∆∞∆°ng ph√°p m·ªõi ---
        # Regex ƒë·ªÉ t√¨m t·∫•t c·∫£ c√°c lo·∫°i kh·ªëi: Ch∆∞∆°ng, M·ª•c, ƒêi·ªÅu, Kho·∫£n, ƒêi·ªÉm
        pattern = re.compile(
            r'^(?:(Ch∆∞∆°ng\s+[A-Z]+)\n(.*?)\n|'  # Group 1, 2: Ch∆∞∆°ng
            r'^(M·ª•c\s+\d+)\n(.*?)\n|'          # Group 3, 4: M·ª•c
            r'^(ƒêi·ªÅu\s+(\d+)\.\s+(.*?))\n|'    # Group 5, 6, 7: ƒêi·ªÅu
            r'^\s*(\d+)\.\s+(.*)|'              # Group 8, 9: Kho·∫£n
            r'^\s*([a-zƒë])\)\s+(.*))',         # Group 10, 11: ƒêi·ªÉm
            re.MULTILINE
        )

        provisions_to_create = []
        last_pos = 0
        current_context = {
            "chapter": "", "section": "", "article_number": 0, "article_title": ""
        }
        
        # B·ªè qua ph·∫ßn header c·ªßa vƒÉn b·∫£n
        content_start = re.search(r'Ch∆∞∆°ng I', content).start()
        
        for match in pattern.finditer(content[content_start:]):
            start, end = match.span()
            
            # X·ª≠ l√Ω vƒÉn b·∫£n n·∫±m gi·ªØa c√°c match (th∆∞·ªùng l√† n·ªôi dung c·ªßa ƒêi·ªÅu/Kho·∫£n)
            intermediate_text = clean_text(content[content_start + last_pos : content_start + start])
            if intermediate_text:
                # ƒê√¢y l√† n·ªôi dung thu·ªôc v·ªÅ ƒêi·ªÅu tr∆∞·ªõc ƒë√≥ nh∆∞ng kh√¥ng c√≥ s·ªë Kho·∫£n
                 if current_context["article_number"] > 0:
                    provisions_to_create.append(LawProvision(
                        document=document, chapter_info=current_context["chapter"], section_info=current_context["section"],
                        article_number=current_context["article_number"], article_title=current_context["article_title"],
                        provision_id=None, content=intermediate_text
                    ))

            # Ph√¢n lo·∫°i v√† c·∫≠p nh·∫≠t context
            if match.group(1): # Ch∆∞∆°ng
                current_context["chapter"] = clean_text(f"{match.group(1)} {match.group(2)}")
                current_context["section"] = ""
            elif match.group(3): # M·ª•c
                current_context["section"] = clean_text(f"{match.group(3)} {match.group(4)}")
            elif match.group(5): # ƒêi·ªÅu
                current_context["article_number"] = int(match.group(6))
                current_context["article_title"] = clean_text(match.group(7))
            elif match.group(8): # Kho·∫£n
                provisions_to_create.append(LawProvision(
                    document=document, chapter_info=current_context["chapter"], section_info=current_context["section"],
                    article_number=current_context["article_number"], article_title=current_context["article_title"],
                    provision_id=match.group(8), content=clean_text(match.group(9))
                ))
            elif match.group(10): # ƒêi·ªÉm
                # T√¨m kho·∫£n g·∫ßn nh·∫•t ƒë·ªÉ gh√©p ID
                last_clause_num = "unknown"
                for p in reversed(provisions_to_create):
                    if p.article_number == current_context["article_number"] and p.provision_id and '.' not in p.provision_id:
                        last_clause_num = p.provision_id
                        break
                
                provisions_to_create.append(LawProvision(
                    document=document, chapter_info=current_context["chapter"], section_info=current_context["section"],
                    article_number=current_context["article_number"], article_title=current_context["article_title"],
                    provision_id=f"{last_clause_num}.{match.group(10)}", content=clean_text(match.group(11))
                ))

            last_pos = end

        # Ki·ªÉm tra tr√πng l·∫∑p tr∆∞·ªõc khi l∆∞u
        seen_keys = set()
        unique_provisions = []
        for p in provisions_to_create:
            key = (p.document_id, p.article_number, p.provision_id)
            if key in seen_keys:
                self.stdout.write(self.style.WARNING(f"‚ö†Ô∏è  C·∫£nh b√°o: B·ªè qua b·∫£n ghi tr√πng l·∫∑p - ƒêi·ªÅu {p.article_number}, Kho·∫£n {p.provision_id}"))
                continue
            seen_keys.add(key)
            unique_provisions.append(p)

        self.stdout.write(f"üìä B√≥c t√°ch ho√†n t·∫•t. Chu·∫©n b·ªã l∆∞u {len(unique_provisions)} ƒëi·ªÅu kho·∫£n v√†o database...")
        LawProvision.objects.bulk_create(unique_provisions)
        self.stdout.write(self.style.SUCCESS(f'üéâ Ho√†n th√†nh! ƒê√£ n·∫°p th√†nh c√¥ng {len(unique_provisions)} ƒëi·ªÅu/kho·∫£n lu·∫≠t.'))