import requests
import json
import os
import sys
from dotenv import load_dotenv

project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
dotenv_path = os.path.join(project_root, '.env')

if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path=dotenv_path)
else:
    print(f"C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y file .env t·∫°i {dotenv_path}")

# --- C·∫•u h√¨nh API Endpoint ---
# S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh
CHATBOT_API_URL = os.getenv("CHATBOT_API_URL", "http://web:8000/api/chatbot/ask/")

def ask_chatbot(question):
    """G·ª≠i c√¢u h·ªèi ƒë·∫øn API chatbot v√† tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi."""
    payload = json.dumps({"question": question})
    headers = {'Content-Type': 'application/json'}

    print(f"DEBUG: ƒêang g·ª≠i y√™u c·∫ßu ƒë·∫øn {CHATBOT_API_URL}") # In debug
    try:
        response = requests.post(CHATBOT_API_URL, headers=headers, data=payload, timeout=90) # TƒÉng timeout l√™n 90 gi√¢y
        print(f"DEBUG: Nh·∫≠n ƒë∆∞·ª£c m√£ tr·∫°ng th√°i: {response.status_code}") # In debug
        # print(f"DEBUG: N·ªôi dung ph·∫£n h·ªìi th√¥: {response.text}") # In debug ph·∫£n h·ªìi th√¥

        response.raise_for_status() # N√©m l·ªói n·∫øu m√£ tr·∫°ng th√°i kh√¥ng ph·∫£i 2xx

        data = response.json()
        answer = data.get("answer", "L·ªói: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi h·ª£p l·ªá.")
        sources = data.get("sources", [])

        # ƒê·ªãnh d·∫°ng ngu·ªìn ƒë·ªÉ hi·ªÉn th·ªã
        source_texts = []
        if sources:
            source_texts.append("\n   Ngu·ªìn tham kh·∫£o:")
            for src in sources:
                 source_texts.append(
                     f"    - ƒêi·ªÅu {src.get('article', '?')}, Kho·∫£n {src.get('provision', 'N/A')} "
                     f"(ƒêi·ªÉm t∆∞∆°ng ƒë·ªìng: {src.get('score', 0):.2f})"
                 )

        return answer + "\n" + "\n".join(source_texts)

    except requests.exceptions.Timeout:
        return "L·ªói: Y√™u c·∫ßu ƒë·∫øn chatbot b·ªã qu√° th·ªùi gian (h∆°n 90 gi√¢y)."
    except requests.exceptions.ConnectionError as e:
         return f"L·ªói k·∫øt n·ªëi: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn {CHATBOT_API_URL}. B·∫°n ƒë√£ ch·∫°y 'docker compose up -d' ch∆∞a? Chi ti·∫øt l·ªói: {e}"
    except requests.exceptions.HTTPError as e:
         # In ra n·ªôi dung l·ªói chi ti·∫øt h∆°n t·ª´ server
         error_content = e.response.text
         try:
             # Th·ª≠ ph√¢n t√≠ch JSON n·∫øu c√≥
             error_json = e.response.json()
             if 'error' in error_json:
                 error_content = error_json['error']
         except json.JSONDecodeError:
             pass # Gi·ªØ nguy√™n error_content n·∫øu kh√¥ng ph·∫£i JSON
         return f"L·ªói HTTP t·ª´ API: {e.response.status_code} {e.response.reason}. N·ªôi dung l·ªói: {error_content}"
    except requests.exceptions.RequestException as e:
        return f"L·ªói y√™u c·∫ßu API kh√¥ng x√°c ƒë·ªãnh: {e}"
    except json.JSONDecodeError:
        # In ra n·ªôi dung kh√¥ng h·ª£p l·ªá nh·∫≠n ƒë∆∞·ª£c
        return f"L·ªói: Ph·∫£n h·ªìi t·ª´ API kh√¥ng ph·∫£i l√† JSON h·ª£p l·ªá. N·ªôi dung nh·∫≠n ƒë∆∞·ª£c:\n{response.text}"
    except Exception as e:
        # B·∫Øt c√°c l·ªói kh√¥ng mong mu·ªën kh√°c
        import traceback
        return f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh x·ª≠ l√Ω: {e}\n{traceback.format_exc()}"


if __name__ == "__main__":
    print("\nü§ñ Chatbot Lu·∫≠t Doanh nghi·ªáp s·∫µn s√†ng!")
    print("   Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n ho·∫∑c g√µ 'quit' ƒë·ªÉ tho√°t.")
    print("-" * 30)

    while True:
        try:
            user_input = input("üë§ B·∫°n: ")
            # Tho√°t n·∫øu ng∆∞·ªùi d√πng nh·∫≠p quit, exit, bye ho·∫∑c ƒë·ªÉ tr·ªëng
            if user_input.lower().strip() in ['quit', 'exit', 'bye', '']:
                print("\nüëã T·∫°m bi·ªát!")
                break

            print("\n‚è≥ ƒêang t√¨m ki·∫øm v√† t·∫°o c√¢u tr·∫£ l·ªùi...")
            bot_response = ask_chatbot(user_input)
            print(f"\nü§ñ Chatbot: {bot_response}")
            print("=" * 70)

        except EOFError: # X·ª≠ l√Ω khi nh·∫•n Ctrl+D
            print("\nüëã T·∫°m bi·ªát!")
            break
        except KeyboardInterrupt: # X·ª≠ l√Ω khi nh·∫•n Ctrl+C
             print("\nüëã T·∫°m bi·ªát!")
             break